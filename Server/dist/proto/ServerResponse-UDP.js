"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: ServerResponse-UDP.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameStateResponse_Coin = exports.GameStateResponse_Player = exports.GameStateResponse = exports.ActionResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = require("protobufjs/minimal");
exports.protobufPackage = "ServerResponse.UDP";
function createBaseActionResponse() {
    return { success: false };
}
exports.ActionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return exports.ActionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseActionResponse();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGameStateResponse() {
    return { players: [], coins: [] };
}
exports.GameStateResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.players) {
            exports.GameStateResponse_Player.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.coins) {
            exports.GameStateResponse_Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.players.push(exports.GameStateResponse_Player.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.coins.push(exports.GameStateResponse_Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            players: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.players)
                ? object.players.map((e) => exports.GameStateResponse_Player.fromJSON(e))
                : [],
            coins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coins)
                ? object.coins.map((e) => exports.GameStateResponse_Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.players) === null || _a === void 0 ? void 0 : _a.length) {
            obj.players = message.players.map((e) => exports.GameStateResponse_Player.toJSON(e));
        }
        if ((_b = message.coins) === null || _b === void 0 ? void 0 : _b.length) {
            obj.coins = message.coins.map((e) => exports.GameStateResponse_Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GameStateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGameStateResponse();
        message.players = ((_a = object.players) === null || _a === void 0 ? void 0 : _a.map((e) => exports.GameStateResponse_Player.fromPartial(e))) || [];
        message.coins = ((_b = object.coins) === null || _b === void 0 ? void 0 : _b.map((e) => exports.GameStateResponse_Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGameStateResponse_Player() {
    return { username: "", positionX: 0, positionY: 0 };
}
exports.GameStateResponse_Player = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.positionX !== 0) {
            writer.uint32(16).int32(message.positionX);
        }
        if (message.positionY !== 0) {
            writer.uint32(24).int32(message.positionY);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameStateResponse_Player();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.positionX = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.positionY = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
            positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.positionX !== 0) {
            obj.positionX = Math.round(message.positionX);
        }
        if (message.positionY !== 0) {
            obj.positionY = Math.round(message.positionY);
        }
        return obj;
    },
    create(base) {
        return exports.GameStateResponse_Player.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGameStateResponse_Player();
        message.username = (_a = object.username) !== null && _a !== void 0 ? _a : "";
        message.positionX = (_b = object.positionX) !== null && _b !== void 0 ? _b : 0;
        message.positionY = (_c = object.positionY) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseGameStateResponse_Coin() {
    return { positionX: 0, positionY: 0 };
}
exports.GameStateResponse_Coin = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.positionX !== 0) {
            writer.uint32(8).int32(message.positionX);
        }
        if (message.positionY !== 0) {
            writer.uint32(16).int32(message.positionY);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGameStateResponse_Coin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.positionX = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.positionY = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
            positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.positionX !== 0) {
            obj.positionX = Math.round(message.positionX);
        }
        if (message.positionY !== 0) {
            obj.positionY = Math.round(message.positionY);
        }
        return obj;
    },
    create(base) {
        return exports.GameStateResponse_Coin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGameStateResponse_Coin();
        message.positionX = (_a = object.positionX) !== null && _a !== void 0 ? _a : 0;
        message.positionY = (_b = object.positionY) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
