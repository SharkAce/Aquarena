"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: ServerAlert-TCP.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndMatch = exports.ShareChatMessage = exports.endMatch_GameOutcomeToJSON = exports.endMatch_GameOutcomeFromJSON = exports.EndMatch_GameOutcome = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = require("protobufjs/minimal");
exports.protobufPackage = "ServerAlert.TCP";
var EndMatch_GameOutcome;
(function (EndMatch_GameOutcome) {
    EndMatch_GameOutcome[EndMatch_GameOutcome["Lost"] = 0] = "Lost";
    EndMatch_GameOutcome[EndMatch_GameOutcome["Won"] = 1] = "Won";
    EndMatch_GameOutcome[EndMatch_GameOutcome["Draw"] = 2] = "Draw";
    EndMatch_GameOutcome[EndMatch_GameOutcome["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EndMatch_GameOutcome || (exports.EndMatch_GameOutcome = EndMatch_GameOutcome = {}));
function endMatch_GameOutcomeFromJSON(object) {
    switch (object) {
        case 0:
        case "Lost":
            return EndMatch_GameOutcome.Lost;
        case 1:
        case "Won":
            return EndMatch_GameOutcome.Won;
        case 2:
        case "Draw":
            return EndMatch_GameOutcome.Draw;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EndMatch_GameOutcome.UNRECOGNIZED;
    }
}
exports.endMatch_GameOutcomeFromJSON = endMatch_GameOutcomeFromJSON;
function endMatch_GameOutcomeToJSON(object) {
    switch (object) {
        case EndMatch_GameOutcome.Lost:
            return "Lost";
        case EndMatch_GameOutcome.Won:
            return "Won";
        case EndMatch_GameOutcome.Draw:
            return "Draw";
        case EndMatch_GameOutcome.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.endMatch_GameOutcomeToJSON = endMatch_GameOutcomeToJSON;
function createBaseShareChatMessage() {
    return { username: "", chatMessage: "" };
}
exports.ShareChatMessage = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.chatMessage !== "") {
            writer.uint32(18).string(message.chatMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShareChatMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.chatMessage = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            chatMessage: isSet(object.chatMessage) ? globalThis.String(object.chatMessage) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.chatMessage !== "") {
            obj.chatMessage = message.chatMessage;
        }
        return obj;
    },
    create(base) {
        return exports.ShareChatMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseShareChatMessage();
        message.username = (_a = object.username) !== null && _a !== void 0 ? _a : "";
        message.chatMessage = (_b = object.chatMessage) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEndMatch() {
    return { outcome: 0 };
}
exports.EndMatch = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.outcome !== 0) {
            writer.uint32(8).int32(message.outcome);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEndMatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.outcome = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { outcome: isSet(object.outcome) ? endMatch_GameOutcomeFromJSON(object.outcome) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.outcome !== 0) {
            obj.outcome = endMatch_GameOutcomeToJSON(message.outcome);
        }
        return obj;
    },
    create(base) {
        return exports.EndMatch.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEndMatch();
        message.outcome = (_a = object.outcome) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
