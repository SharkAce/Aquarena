// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: ClientRequest-UDP.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "ClientRequest.UDP";

export interface GameStateRequest {
  matchId: Uint8Array;
}

export interface ActionRequest {
  sessionId: Uint8Array;
  matchId: Uint8Array;
  targetX: number;
  targetY: number;
}

function createBaseGameStateRequest(): GameStateRequest {
  return { matchId: new Uint8Array(0) };
}

export const GameStateRequest = {
  encode(message: GameStateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.matchId.length !== 0) {
      writer.uint32(10).bytes(message.matchId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameStateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matchId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateRequest {
    return { matchId: isSet(object.matchId) ? bytesFromBase64(object.matchId) : new Uint8Array(0) };
  },

  toJSON(message: GameStateRequest): unknown {
    const obj: any = {};
    if (message.matchId.length !== 0) {
      obj.matchId = base64FromBytes(message.matchId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateRequest>, I>>(base?: I): GameStateRequest {
    return GameStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateRequest>, I>>(object: I): GameStateRequest {
    const message = createBaseGameStateRequest();
    message.matchId = object.matchId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseActionRequest(): ActionRequest {
  return { sessionId: new Uint8Array(0), matchId: new Uint8Array(0), targetX: 0, targetY: 0 };
}

export const ActionRequest = {
  encode(message: ActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionId.length !== 0) {
      writer.uint32(10).bytes(message.sessionId);
    }
    if (message.matchId.length !== 0) {
      writer.uint32(18).bytes(message.matchId);
    }
    if (message.targetX !== 0) {
      writer.uint32(24).int32(message.targetX);
    }
    if (message.targetY !== 0) {
      writer.uint32(32).int32(message.targetY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.matchId = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.targetX = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.targetY = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionRequest {
    return {
      sessionId: isSet(object.sessionId) ? bytesFromBase64(object.sessionId) : new Uint8Array(0),
      matchId: isSet(object.matchId) ? bytesFromBase64(object.matchId) : new Uint8Array(0),
      targetX: isSet(object.targetX) ? globalThis.Number(object.targetX) : 0,
      targetY: isSet(object.targetY) ? globalThis.Number(object.targetY) : 0,
    };
  },

  toJSON(message: ActionRequest): unknown {
    const obj: any = {};
    if (message.sessionId.length !== 0) {
      obj.sessionId = base64FromBytes(message.sessionId);
    }
    if (message.matchId.length !== 0) {
      obj.matchId = base64FromBytes(message.matchId);
    }
    if (message.targetX !== 0) {
      obj.targetX = Math.round(message.targetX);
    }
    if (message.targetY !== 0) {
      obj.targetY = Math.round(message.targetY);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionRequest>, I>>(base?: I): ActionRequest {
    return ActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionRequest>, I>>(object: I): ActionRequest {
    const message = createBaseActionRequest();
    message.sessionId = object.sessionId ?? new Uint8Array(0);
    message.matchId = object.matchId ?? new Uint8Array(0);
    message.targetX = object.targetX ?? 0;
    message.targetY = object.targetY ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
