// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: ServerResponse-UDP.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "ServerResponse.UDP";

export interface ActionResponse {
  success: boolean;
}

export interface GameStateResponse {
  players: GameStateResponse_Player[];
  coins: GameStateResponse_Coin[];
}

export interface GameStateResponse_Player {
  username: string;
  positionX: number;
  positionY: number;
}

export interface GameStateResponse_Coin {
  positionX: number;
  positionY: number;
}

function createBaseActionResponse(): ActionResponse {
  return { success: false };
}

export const ActionResponse = {
  encode(message: ActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: ActionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionResponse>, I>>(base?: I): ActionResponse {
    return ActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionResponse>, I>>(object: I): ActionResponse {
    const message = createBaseActionResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGameStateResponse(): GameStateResponse {
  return { players: [], coins: [] };
}

export const GameStateResponse = {
  encode(message: GameStateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.players) {
      GameStateResponse_Player.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.coins) {
      GameStateResponse_Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameStateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.players.push(GameStateResponse_Player.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.coins.push(GameStateResponse_Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateResponse {
    return {
      players: globalThis.Array.isArray(object?.players)
        ? object.players.map((e: any) => GameStateResponse_Player.fromJSON(e))
        : [],
      coins: globalThis.Array.isArray(object?.coins)
        ? object.coins.map((e: any) => GameStateResponse_Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GameStateResponse): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => GameStateResponse_Player.toJSON(e));
    }
    if (message.coins?.length) {
      obj.coins = message.coins.map((e) => GameStateResponse_Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateResponse>, I>>(base?: I): GameStateResponse {
    return GameStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateResponse>, I>>(object: I): GameStateResponse {
    const message = createBaseGameStateResponse();
    message.players = object.players?.map((e) => GameStateResponse_Player.fromPartial(e)) || [];
    message.coins = object.coins?.map((e) => GameStateResponse_Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGameStateResponse_Player(): GameStateResponse_Player {
  return { username: "", positionX: 0, positionY: 0 };
}

export const GameStateResponse_Player = {
  encode(message: GameStateResponse_Player, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.positionX !== 0) {
      writer.uint32(16).int32(message.positionX);
    }
    if (message.positionY !== 0) {
      writer.uint32(24).int32(message.positionY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameStateResponse_Player {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateResponse_Player();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.positionX = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.positionY = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateResponse_Player {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
      positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
    };
  },

  toJSON(message: GameStateResponse_Player): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.positionX !== 0) {
      obj.positionX = Math.round(message.positionX);
    }
    if (message.positionY !== 0) {
      obj.positionY = Math.round(message.positionY);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateResponse_Player>, I>>(base?: I): GameStateResponse_Player {
    return GameStateResponse_Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateResponse_Player>, I>>(object: I): GameStateResponse_Player {
    const message = createBaseGameStateResponse_Player();
    message.username = object.username ?? "";
    message.positionX = object.positionX ?? 0;
    message.positionY = object.positionY ?? 0;
    return message;
  },
};

function createBaseGameStateResponse_Coin(): GameStateResponse_Coin {
  return { positionX: 0, positionY: 0 };
}

export const GameStateResponse_Coin = {
  encode(message: GameStateResponse_Coin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.positionX !== 0) {
      writer.uint32(8).int32(message.positionX);
    }
    if (message.positionY !== 0) {
      writer.uint32(16).int32(message.positionY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameStateResponse_Coin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateResponse_Coin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positionX = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.positionY = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateResponse_Coin {
    return {
      positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
      positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
    };
  },

  toJSON(message: GameStateResponse_Coin): unknown {
    const obj: any = {};
    if (message.positionX !== 0) {
      obj.positionX = Math.round(message.positionX);
    }
    if (message.positionY !== 0) {
      obj.positionY = Math.round(message.positionY);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateResponse_Coin>, I>>(base?: I): GameStateResponse_Coin {
    return GameStateResponse_Coin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateResponse_Coin>, I>>(object: I): GameStateResponse_Coin {
    const message = createBaseGameStateResponse_Coin();
    message.positionX = object.positionX ?? 0;
    message.positionY = object.positionY ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
