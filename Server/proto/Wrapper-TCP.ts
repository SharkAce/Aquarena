// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: Wrapper-TCP.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "Wrapper.TCP";

export interface TcpWrapper {
  payloadType: TcpWrapper_MessageType;
  payload: Uint8Array;
}

export enum TcpWrapper_MessageType {
  LoginRequest = 0,
  LoginResponse = 1,
  FindMatchRequest = 2,
  FindMatchResponse = 3,
  ChatMessageRequest = 4,
  ShareChatMessage = 5,
  UNRECOGNIZED = -1,
}

export function tcpWrapper_MessageTypeFromJSON(object: any): TcpWrapper_MessageType {
  switch (object) {
    case 0:
    case "LoginRequest":
      return TcpWrapper_MessageType.LoginRequest;
    case 1:
    case "LoginResponse":
      return TcpWrapper_MessageType.LoginResponse;
    case 2:
    case "FindMatchRequest":
      return TcpWrapper_MessageType.FindMatchRequest;
    case 3:
    case "FindMatchResponse":
      return TcpWrapper_MessageType.FindMatchResponse;
    case 4:
    case "ChatMessageRequest":
      return TcpWrapper_MessageType.ChatMessageRequest;
    case 5:
    case "ShareChatMessage":
      return TcpWrapper_MessageType.ShareChatMessage;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TcpWrapper_MessageType.UNRECOGNIZED;
  }
}

export function tcpWrapper_MessageTypeToJSON(object: TcpWrapper_MessageType): string {
  switch (object) {
    case TcpWrapper_MessageType.LoginRequest:
      return "LoginRequest";
    case TcpWrapper_MessageType.LoginResponse:
      return "LoginResponse";
    case TcpWrapper_MessageType.FindMatchRequest:
      return "FindMatchRequest";
    case TcpWrapper_MessageType.FindMatchResponse:
      return "FindMatchResponse";
    case TcpWrapper_MessageType.ChatMessageRequest:
      return "ChatMessageRequest";
    case TcpWrapper_MessageType.ShareChatMessage:
      return "ShareChatMessage";
    case TcpWrapper_MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseTcpWrapper(): TcpWrapper {
  return { payloadType: 0, payload: new Uint8Array(0) };
}

export const TcpWrapper = {
  encode(message: TcpWrapper, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payloadType !== 0) {
      writer.uint32(8).int32(message.payloadType);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TcpWrapper {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.payloadType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpWrapper {
    return {
      payloadType: isSet(object.payloadType) ? tcpWrapper_MessageTypeFromJSON(object.payloadType) : 0,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: TcpWrapper): unknown {
    const obj: any = {};
    if (message.payloadType !== 0) {
      obj.payloadType = tcpWrapper_MessageTypeToJSON(message.payloadType);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TcpWrapper>, I>>(base?: I): TcpWrapper {
    return TcpWrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TcpWrapper>, I>>(object: I): TcpWrapper {
    const message = createBaseTcpWrapper();
    message.payloadType = object.payloadType ?? 0;
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
