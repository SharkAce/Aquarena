// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v4.23.3
// source: ServerAlert-TCP.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "ServerAlert.TCP";

export interface ShareChatMessage {
  username: string;
  chatMessage: string;
}

export interface EndMatch {
  outcome: EndMatch_GameOutcome;
}

export enum EndMatch_GameOutcome {
  Lost = 0,
  Won = 1,
  Draw = 2,
  UNRECOGNIZED = -1,
}

export function endMatch_GameOutcomeFromJSON(object: any): EndMatch_GameOutcome {
  switch (object) {
    case 0:
    case "Lost":
      return EndMatch_GameOutcome.Lost;
    case 1:
    case "Won":
      return EndMatch_GameOutcome.Won;
    case 2:
    case "Draw":
      return EndMatch_GameOutcome.Draw;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EndMatch_GameOutcome.UNRECOGNIZED;
  }
}

export function endMatch_GameOutcomeToJSON(object: EndMatch_GameOutcome): string {
  switch (object) {
    case EndMatch_GameOutcome.Lost:
      return "Lost";
    case EndMatch_GameOutcome.Won:
      return "Won";
    case EndMatch_GameOutcome.Draw:
      return "Draw";
    case EndMatch_GameOutcome.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseShareChatMessage(): ShareChatMessage {
  return { username: "", chatMessage: "" };
}

export const ShareChatMessage = {
  encode(message: ShareChatMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.chatMessage !== "") {
      writer.uint32(18).string(message.chatMessage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ShareChatMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShareChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chatMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShareChatMessage {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      chatMessage: isSet(object.chatMessage) ? globalThis.String(object.chatMessage) : "",
    };
  },

  toJSON(message: ShareChatMessage): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.chatMessage !== "") {
      obj.chatMessage = message.chatMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShareChatMessage>, I>>(base?: I): ShareChatMessage {
    return ShareChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShareChatMessage>, I>>(object: I): ShareChatMessage {
    const message = createBaseShareChatMessage();
    message.username = object.username ?? "";
    message.chatMessage = object.chatMessage ?? "";
    return message;
  },
};

function createBaseEndMatch(): EndMatch {
  return { outcome: 0 };
}

export const EndMatch = {
  encode(message: EndMatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.outcome !== 0) {
      writer.uint32(8).int32(message.outcome);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EndMatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.outcome = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndMatch {
    return { outcome: isSet(object.outcome) ? endMatch_GameOutcomeFromJSON(object.outcome) : 0 };
  },

  toJSON(message: EndMatch): unknown {
    const obj: any = {};
    if (message.outcome !== 0) {
      obj.outcome = endMatch_GameOutcomeToJSON(message.outcome);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EndMatch>, I>>(base?: I): EndMatch {
    return EndMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndMatch>, I>>(object: I): EndMatch {
    const message = createBaseEndMatch();
    message.outcome = object.outcome ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
